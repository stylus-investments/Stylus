generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model admin {
  id         Int      @id @default(autoincrement())
  name       String
  username   String   @unique
  password   String   @unique
  root_admin Boolean  @default(false)
  created_at DateTime @default(now())
}

model snapshot {
  id            Int             @id @default(autoincrement())
  start_date    DateTime
  end_date      DateTime
  completed     Boolean         @default(false)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  user_snapshot user_snapshot[]
}

model user_snapshot {
  id          Int      @id @default(autoincrement())
  stake       String
  balance     String
  reward      String
  status      Int
  wallet      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     String
  snapshot_id Int
  snapshot    snapshot @relation(fields: [snapshot_id], references: [id], onDelete: Cascade)

  @@index([snapshot_id], map: "user_snapshot_snapshot_id_fkey")
}

model user_order {
  id                      String               @id @default(uuid())
  amount                  String
  user_id                 String
  status                  String
  receipt                 String?
  method                  String
  active                  Boolean              @default(false)
  user_unread_messages    Int                  @default(0)
  admin_unread_messages   Int                  @default(0)
  request_chat            Boolean              @default(false)
  closed                  Boolean              @default(false)
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
  order_message           order_message[]
  user_investment_plan    user_investment_plan @relation(fields: [user_investment_plan_id], references: [id], onDelete: Cascade)
  user_investment_plan_id String

  @@index([user_investment_plan_id])
}

model user_investment_plan {
  id                         String                  @id @default(uuid())
  user                       user_info               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id                    String
  name                       String
  base_price                 Int
  total_price                Int
  payment_count              Int
  next_order_creation        DateTime
  completed                  Boolean                 @default(false)
  profit_protection          Boolean                 @default(false) // Optional for 10-year plans
  insurance                  Boolean                 @default(false) // Optional for 10 and 20-year plans
  payments                   user_order[]
  package                    investment_plan_package @relation(fields: [investment_plan_package_id], references: [id], onDelete: Cascade)
  investment_plan_package_id String
  created_at                 DateTime                @default(now())
  updated_at                 DateTime                @updatedAt

  @@index([user_id])
  @@index([investment_plan_package_id])
}

model investment_plan_package {
  id            String       @id @default(uuid())
  name          String
  duration      Int
  billing_cycle BillingCycle
  currency      Currency
  prices        Json
  perks         Json

  user_investment_plan user_investment_plan[]
}

enum Currency {
  PHP
  USD
  EUR
}

enum BillingCycle {
  DAILY
  WEEKLY
  MONTHLY
}

model currency_conversion {
  id              Int    @id @default(autoincrement())
  currency        String @unique
  conversion_rate String
}

model order_message {
  id         Int        @id @default(autoincrement())
  order_id   String
  sender     String
  content    String
  is_image   Boolean
  seen       Boolean    @default(false)
  created_at DateTime   @default(now())
  user_order user_order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "order_message_order_id_fkey")
}

model user_info {
  user_id              String                 @id
  wallet               String
  status               ProfileStatus          @default(INCOMPLETE)
  first_name           String
  last_name            String
  email                String
  mobile               String
  claimed_gass         Boolean                @default(false)
  age                  String
  id_image             Json?
  front_id             String?
  back_id              String?
  verification_message String?
  verified_attemp      Int                    @default(0)
  birth_date           DateTime
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  investment_plans     user_investment_plan[]
  referral_payout      referral_payout[]
  inviter_reward       referral_reward[]
  referral_info        referral_info[]
  user_notification    user_notification[]
}

model user_notification {
  id         String    @id @default(uuid())
  from       String
  link       String?
  message    String
  times      Int       @default(1)
  seen       Boolean   @default(false)
  user       user_info @relation(fields: [user_id], references: [user_id])
  user_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([user_id])
}

enum ProfileStatus {
  INCOMPLETE
  PENDING
  VERIFIED
  INVALID
}

model referral_info {
  user_info              user_info         @relation(fields: [user_id], references: [user_id])
  user_id                String            @id
  total_reward           Int               @default(0)
  unclaimed_reward       Int               @default(0)
  payment_method         PaymentMethods    @default(GCASH)
  payment_account_name   String
  payment_account_number String
  reward_history         referral_reward[]
  total_invites          Int               @default(0)
  inviter_referral_code  String
  referral_code          String            @unique
}

enum PaymentMethods {
  GCASH
}

model referral_reward {
  id                       Int           @id @default(autoincrement())
  reward                   Int
  user                     user_info     @relation(fields: [user_invited_id], references: [user_id], onDelete: Cascade)
  user_invited_id          String        @unique
  inviter_referral_info    referral_info @relation(fields: [inviter_referral_info_id], references: [user_id], onDelete: Cascade)
  inviter_referral_info_id String

  @@index([inviter_referral_info_id])
}

model referral_payout {
  id                     String         @id @default(uuid())
  amount                 Int
  status                 String
  payment_method         PaymentMethods @default(GCASH)
  payment_account_name   String
  payment_account_number String
  user                   user_info      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id                String
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt

  @@index([user_id])
}
